{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","hooks/http.hook.js","services/MarvelService.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js","components/pages/SingleComicPage.js"],"names":["ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","useHttp","useState","loading","setLoading","error","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useMarvelService","_apiBase","_apiKey","getAllCharacters","a","offset","res","results","map","_transformCharacter","getCharacter","id","getAllComics","_transformComics","getComics","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","title","pageCount","language","textObjects","prices","price","AppBanner","className","avengers","avengersLogo","View","comic","to","SingleComicPage","comicId","useParams","setComic","useEffect","updateComics","then","onComicsLoaded","errorMessage","spinner","content"],"mappings":"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","file":"static/js/5.3d7e6e81.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from \"./error.gif\";\r\n\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: '250 px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt=''/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useCallback } from 'react';\r\n\r\nconst useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n        \r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n            if(!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n            const data = await response.json();\r\n            setLoading(false);\r\n\r\n            return data\r\n        \r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, error, request, clearError};\r\n}\r\n\r\nexport default useHttp;\r\n","import useHttp from '../hooks/http.hook'\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, error, request, clearError} = useHttp();\r\n\r\n    const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n    const _apiKey = \"apikey=42e09bced1848d4ec4fd4dc5a818c5f2\";\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComics = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : \"No Description, Sorry!\",\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || \"No Description, Sorry!\",\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : \"No information about the number of pages\",\r\n            language: comics.textObjects.language || 'en-us',\r\n            prices: comics.prices.price ? `${comics.prices.price}$` : 'Not Available'\r\n        }\r\n    }\r\n\r\n    return {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComics}\r\n}\r\n\r\nexport default useMarvelService","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import { useState, useEffect, } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\n\r\nimport AppBanner from '../appBanner/AppBanner';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './singleComicPage.scss';\r\n\r\nconst SingleComicPage = () => {\r\n    const {comicId} = useParams();\r\n    const [comic, setComic] = useState(null);\r\n    const {loading, error, getComics, clearError} = useMarvelService();\r\n    \r\n    useEffect(() => {\r\n        updateComics()\r\n    }, [comicId])\r\n\r\n    const updateComics = () => {\r\n        clearError()\r\n        getComics(comicId)\r\n        .then(onComicsLoaded)\r\n    }\r\n\r\n    const onComicsLoaded = (comic) => {\r\n        setComic(comic);\r\n    }\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const content = !(loading || error || !comic) ? <View comic={comic}/> : null;\r\n\r\n    return (\r\n        <>\r\n            <AppBanner/>\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </>\r\n    )\r\n}\r\n\r\nconst View = ({comic}) => {\r\n        const { pageCount, title, description, language, prices, thumbnail } = comic;\r\n\r\n        return (\r\n            <div className=\"single-comic\">\r\n                <img src={thumbnail} alt={title} className=\"single-comic__img\"/>\r\n                <div className=\"single-comic__info\">\r\n                    <h2 className=\"single-comic__name\">{title}</h2>\r\n                    <p className=\"single-comic__descr\">{description}</p>\r\n                    <p className=\"single-comic__descr\">{pageCount}</p>\r\n                    <p className=\"single-comic__descr\">Language: {language}</p>\r\n                    <div className=\"single-comic__price\">{prices}</div>\r\n                </div>\r\n                <Link to='/comics' className=\"single-comic__back\">Back to all</Link>\r\n            </div>\r\n        )\r\n    }\r\n\r\nexport default SingleComicPage;"],"sourceRoot":""}